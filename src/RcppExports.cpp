// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// connect
SEXP connect(std::string host, int port);
RcppExport SEXP _rabbitr_connect(SEXP hostSEXP, SEXP portSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type host(hostSEXP);
    Rcpp::traits::input_parameter< int >::type port(portSEXP);
    rcpp_result_gen = Rcpp::wrap(connect(host, port));
    return rcpp_result_gen;
END_RCPP
}
// channel_open
void channel_open(SEXP xptr, int channel);
RcppExport SEXP _rabbitr_channel_open(SEXP xptrSEXP, SEXP channelSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xptr(xptrSEXP);
    Rcpp::traits::input_parameter< int >::type channel(channelSEXP);
    channel_open(xptr, channel);
    return R_NilValue;
END_RCPP
}
// queue_declare
void queue_declare(SEXP xptr);
RcppExport SEXP _rabbitr_queue_declare(SEXP xptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xptr(xptrSEXP);
    queue_declare(xptr);
    return R_NilValue;
END_RCPP
}
// consume
void consume(SEXP xptr);
RcppExport SEXP _rabbitr_consume(SEXP xptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xptr(xptrSEXP);
    consume(xptr);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rabbitr_connect", (DL_FUNC) &_rabbitr_connect, 2},
    {"_rabbitr_channel_open", (DL_FUNC) &_rabbitr_channel_open, 2},
    {"_rabbitr_queue_declare", (DL_FUNC) &_rabbitr_queue_declare, 1},
    {"_rabbitr_consume", (DL_FUNC) &_rabbitr_consume, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_rabbitr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
